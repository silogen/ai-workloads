apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Meta.Name }}
  namespace: {{ .Meta.Namespace }}
  labels:
    kueue.x-k8s.io/queue-name: {{ .WorkloadMeta.Queue }}
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 0
  template:
    spec:
      restartPolicy: "Never"
      {{- if .Meta.ImagePullSecret }}
      imagePullSecrets:
      - name: {{ .Meta.ImagePullSecret }}
      {{- end }}
      containers:
      - name: {{ .Meta.Name }}
        image: ghcr.io/silogen/logistics:v0.1
        imagePullPolicy: Always
        {{- if .Workload.Entrypoint }}
        command: 
        - sh
        - -c
        - {{ .Workload.Entrypoint }}
        {{- else }}
        command:
        - sh
        - -e
        - -u
        - -c
        args:
        - |
          echo 'Setting up minio'
          mc alias set minio-host ${BUCKET_STORAGE_HOST} ${BUCKET_STORAGE_ACCESS_KEY} ${BUCKET_STORAGE_SECRET_KEY}
          echo 'Downloading the model to the local container'
          huggingface-cli download {{ .Custom.modelID }} \
            --exclude '{{ default "original/*"" .Custom.downloadExcludeGlob }}' \
            {{- if .Custom.modelRevision }}
            --revision {{ .Custom.modelRevision }}
            {{- end }}
            --local-dir local_models/downloaded_model
          echo 'Uploading the model to the bucket, to {{ .Custom.bucketPath | trimSuffix "/" }}'
          mc mirror --exclude '.cache/huggingface/*' \
            --exclude '.gitattributes' \
            {{- if .Custom.allowOverwrite }}
            --overwrite \
            {{- end }}
            local_models/downloaded_model/ minio-host/{{ .Custom.bucketPath | trimSuffix "/" }}
        {{- end }}
        env:
        {{- if .Meta.EnvVars }}
        {{- range .Meta.EnvVars }}
        {{- if .Value }}
          - name: {{ .Name }}
            value: "{{ .Value }}"
        {{- else }}
          - name: {{ .Name }}
            valueFrom:
              secretKeyRef:
                name: {{ .ValueFrom.SecretKeyRef.Name }}
                key: {{ .ValueFrom.SecretKeyRef.Key }}
        {{- end }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            memory: "{{ mul .Scheduling.TotalRequestedGPUs 32 }}Gi"
            cpu: "{{ mul .Scheduling.TotalRequestedGPUs 4 }}"
            amd.com/gpu: "{{ .Scheduling.TotalRequestedGPUs }}"
          limits:
            memory: "{{ mul .Scheduling.TotalRequestedGPUs 32 }}Gi"
            cpu: "{{ mul .Scheduling.TotalRequestedGPUs 4 }}"
            amd.com/gpu: "{{ .Scheduling.TotalRequestedGPUs }}"
        volumeMounts:
        {{- if .Meta.SecretVolumes }}
        {{- range .Meta.SecretVolumes }}
          - name: {{ .Name }}
            mountPath: {{ .MountPath }}
            subPath: {{ .SubPath }}
        {{- end }}
        {{- end }}
        {{- if .Meta.HasConfigMap }}
          - mountPath: /workload
            name: workload
        {{- end }}
          - mountPath: /dev/shm
            name: dshm
      volumes:
      {{- if .Meta.SecretVolumes }}
      {{- range .Meta.SecretVolumes }}
        - name: {{ .Name }}
          secret:
            secretName: {{ .SecretName }}
            items:
              - key: {{ .Key }}
                path: {{ .SubPath }}
      {{- end }}
      {{- end }}
      {{- if .Meta.HasConfigMap }}
        - name: workload
          configMap:
            name: {{ .Meta.Name }}
      {{- end }}
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 200Gi
