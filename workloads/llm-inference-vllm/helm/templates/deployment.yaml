apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "llm-inference-vllm.fullname" . }}
  labels:
    {{- if .Values.labels }}
      {{- toYaml .Values.labels | nindent 4 }}
    {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "llm-inference-vllm.fullname" . }}
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ include "llm-inference-vllm.fullname" . }}
    spec:
      # TODO: vLLM requires root user to run now, need to fix this
      # securityContext:
      #   fsGroup: 1000
      #   runAsGroup: 1000
      #   runAsUser: 1000
      restartPolicy: Always
      {{- if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret }}
      {{- end }}
      containers:
        - image: {{ .Values.image }}
          imagePullPolicy: Always
          name: {{ include "llm-inference-vllm.name" . }}
          command: ["sh", "-c"]
          args:
            - >
              python3 -m vllm.entrypoints.openai.api_server
              --host="0.0.0.0"
              --port=8080
              --model="{{ .Values.model }}"
              --tensor-parallel-size="{{ .Values.gpus }}"
          env:
            - name: HF_HOME
              value: /workload/.cache/huggingface
            - name: HF_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.hf_token.secret_name }}
                  key: {{ .Values.hf_token.key }}
            - name: BUCKET_STORAGE_HOST
              value: {{ .Values.bucket_storage.host }}
            - name: BUCKET_STORAGE_ACCESS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucket_storage.credentials.secret_name }}
                  key: {{ .Values.bucket_storage.credentials.access_key_key }}
            - name: BUCKET_STORAGE_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucket_storage.credentials.secret_name }}
                  key: {{ .Values.bucket_storage.credentials.secret_key_key }}
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "{{ max (mul .Values.gpus 32) 4 }}Gi"
              cpu: "{{ max (mul .Values.gpus 4) 1 }}"
              {{- if .Values.gpus }}
              amd.com/gpu: "{{ .Values.gpus }}"
              {{- end }}
            limits:
              memory: "{{ max (mul .Values.gpus 32) 4 }}Gi"
              cpu: "{{ max (mul .Values.gpus 4) 1 }}"
              {{- if .Values.gpus }}
              amd.com/gpu: "{{ .Values.gpus }}"
              {{- end }}
          volumeMounts:
            - mountPath: /workload
              name: ephemeral-storage
            - mountPath: /dev/shm
              name: dshm
      volumes:
        - ephemeral:
            volumeClaimTemplate:
              metadata:
                creationTimestamp: null
              spec:
                accessModes:
                  - ReadWriteOnce
                storageClassName: {{ .Values.storage.storageClassName }}
                resources:
                  requests:
                    storage: {{ .Values.storage.quantity }}
          name: ephemeral-storage
        - emptyDir:
            medium: Memory
            sizeLimit: {{ .Values.dshm.sizeLimit }}
          name: dshm
