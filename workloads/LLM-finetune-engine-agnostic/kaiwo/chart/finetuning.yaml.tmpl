{{- $basemodel_remote := print "bucket-host/" ( .Custom.baseModel | trimSuffix "/" ) -}}
{{- $full_checkpoints_path := print "bucket-host/" ( .Custom.checkpointsBucketPath | trimSuffix "/" ) -}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Meta.Name }}
  namespace: {{ .Meta.Namespace }}
  labels:
    kueue.x-k8s.io/queue-name: {{ .WorkloadMeta.Queue }}
    kaiwo-cli/username: {{ .Meta.User }}
spec:
  ttlSecondsAfterFinished: 3600
  template:
    spec:
      restartPolicy: "Never"
      {{- if .Meta.ImagePullSecret }}
      imagePullSecrets:
      - name: {{ .Meta.ImagePullSecret }}
      {{- end }}
      initContainers:
      - name: download
        image: "europe-west4-docker.pkg.dev/silogen-dev/silogen-dev/logistics:ai-workloads"
        imagePullPolicy: IfNotPresent
        command: ["sh", "-e", "-u", "-c"]
        args:
          - |
            {{- if not .Workload.Entrypoint }}
            for file in "finetuning_config.yaml" "accelerate_config.yaml"; do
              [ ! -f /workload/$file ] && { echo "With default finetuning engine, $file is required, but not found in the workload directory!"; exit 1; }
            done
            {{- end }}
            # Setup MinIO, Download resources:
            echo "Copying resources to container...";
            # First download datafiles
            mc alias set bucket-host ${BUCKET_STORAGE_HOST} ${BUCKET_STORAGE_ACCESS_KEY} ${BUCKET_STORAGE_SECRET_KEY}
            {{- range $datafile := .Custom.dataDownloads }}
            {{- $full_bucket_path := print "bucket-host/" ( .bucketPath | trimSuffix "/" ) }}
            {{- $full_local_path := print "/local_resources/" ( .localName | trimSuffix "/" ) }}
            # Separate stat so that missing paths will trigger an error
            stat_result=$(mc stat {{ $full_bucket_path }} )
            if echo $stat_result | grep --quiet "Type *: folder"; then
            mc cp --recursive {{ $full_bucket_path }}/ {{ $full_local_path }}
            else
            mc cp {{ $full_bucket_path }} {{ $full_local_path }}
            fi
            # Then download basemodel
            mc cp --recursive {{ $basemodel_remote }}/ /local_resources/basemodel
            # Sync checkpoints from remote to local
            {{- end }}
            if mc mirror {{ $full_checkpoints_path }} /workdir/checkpoints 2>/dev/null; then
              echo "Downloaded checkpoints from {{ $full_checkpoints_path }} "
            else
              echo "No checkpoints found yet"
            fi
        env:
        {{- if .Meta.EnvVars }}
        {{- range .Meta.EnvVars }}
        {{- if .Value }}
          - name: {{ .Name }}
            value: "{{ .Value }}"
        {{- else }}
          - name: {{ .Name }}
            valueFrom:
              secretKeyRef:
                name: {{ .ValueFrom.SecretKeyRef.Name }}
                key: {{ .ValueFrom.SecretKeyRef.Key }}
        {{- end }}
        {{- end }}
        {{- end }}
        resources:
          limits:
            memory: "1Gi"
            cpu: 1
          requests:
            memory: "1Gi"
            cpu: 1
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop: ["ALL"]
        volumeMounts:
          - name: downloads
            mountPath: /local_resources
            readOnly: false
          - name: checkpoints
            mountPath: /workdir/checkpoints
            readOnly: false
        {{- if .Meta.HasConfigMap }}
          - mountPath: /workload
            name: workload
        {{- end }}
          - mountPath: /dev/shm
            name: dshm
      - name: upload
        image: "europe-west4-docker.pkg.dev/silogen-dev/silogen-dev/logistics:ai-workloads"
        imagePullPolicy: IfNotPresent
        restartPolicy: Always
        command: ["bash", "-e", "-u", "-c"]
        args:
          - |
            # Setup MinIO:
            mc alias set bucket-host ${BUCKET_STORAGE_HOST} ${BUCKET_STORAGE_ACCESS_KEY} ${BUCKET_STORAGE_SECRET_KEY}
            echo "Syncing checkpoint artifacts to bucket...";
            while [ ! -f /semaphores/done_training ]; do
              # Any existing checkpoints will always produce a 'Failed to perform mirroring' error, filter it out of the logs
              mc mirror /workdir/checkpoints {{ $full_checkpoints_path }} 2> >(grep -v 'Overwrite not allowed for' >&2)
              sleep 15
            done
            # Once more to ensure everything gets uploaded
            echo "Training done, syncing once more..."
            mc mirror /workdir/checkpoints {{ $full_checkpoints_path }} 2> >(grep -v 'Overwrite not allowed for' >&2)
            {{- if not .Workload.Entrypoint }}
            echo "Syncing /workdir/checkpoints/checkpoint-final with --overwrite to handle vLLM compatibility changes in that checkpoint"
            mc mirror --overwrite /workdir/checkpoints/checkpoint-final {{ $full_checkpoints_path }}/checkpoint-final
            {{- end }}
            echo "Done uploading"
            touch /semaphores/done_uploading
            sleep 10  # Let the main container catch
        resources:
          limits:
            memory: "1Gi"
            cpu: 1
          requests:
            memory: "1Gi"
            cpu: 1
        env:
        {{- if .Meta.EnvVars }}
        {{- range .Meta.EnvVars }}
        {{- if .Value }}
          - name: {{ .Name }}
            value: "{{ .Value }}"
        {{- else }}
          - name: {{ .Name }}
            valueFrom:
              secretKeyRef:
                name: {{ .ValueFrom.SecretKeyRef.Name }}
                key: {{ .ValueFrom.SecretKeyRef.Key }}
        {{- end }}
        {{- end }}
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop: ["ALL"]
        volumeMounts:
          - name: checkpoints
            mountPath: /workdir/checkpoints
            readOnly: true
          - name: semaphores
            mountPath: /semaphores
            readOnly: false
        {{- if .Meta.HasConfigMap }}
          - mountPath: /workload
            name: workload
        {{- end }}
      containers:
      - name: {{ .Meta.Name }}
        image: {{ default "europe-west4-docker.pkg.dev/silogen-dev/silogen-dev/rocm-silogen-finetuning-worker:allow-extra-hf-5a1b7af9" .Custom.mainImage }}
        imagePullPolicy: Always
        {{- if .Workload.Entrypoint }}
        command: 
        - sh
        - -c
        - {{ .Workload.Entrypoint }}
        {{- else }}
        command:
        - bash
        - -e
        - -u
        - -c
        args:
        - |
          # Print GPU Info:
          rocm-smi
          # Run training:
          echo "Running training"
          accelerate launch \
            --config_file /workload/accelerate_config.yaml \
            --no-python \
            finetuning --num-preprocess-workers 4 {{ default "sft" .Custom.method }} /workload/finetuning_config.yaml
          # Post process:
          create_vllm_compatible_adapter --training-config /workload/finetuning_config.yaml ./checkpoints/checkpoint-final
          merge_adapter /local_resources/basemodel ./checkpoints/checkpoint-final ./checkpoints/checkpoint-final-merged
          touch /semaphores/done_training
          echo "Done training, waiting for uploads..."
          while [ ! -f /semaphores/done_uploading ]; do
            sleep 5;
          done
          echo "All done, exiting"
        {{- end }}
        env:
        {{- if .Meta.EnvVars }}
        {{- range .Meta.EnvVars }}
        {{- if .Value }}
          - name: {{ .Name }}
            value: "{{ .Value }}"
        {{- else }}
          - name: {{ .Name }}
            valueFrom:
              secretKeyRef:
                name: {{ .ValueFrom.SecretKeyRef.Name }}
                key: {{ .ValueFrom.SecretKeyRef.Key }}
        {{- end }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            memory: "{{ mul .Scheduling.TotalRequestedGPUs 32 }}Gi"
            cpu: "{{ mul .Scheduling.TotalRequestedGPUs 4 }}"
            amd.com/gpu: "{{ .Scheduling.TotalRequestedGPUs }}"
          limits:
            memory: "{{ mul .Scheduling.TotalRequestedGPUs 32 }}Gi"
            cpu: "{{ mul .Scheduling.TotalRequestedGPUs 4 }}"
            amd.com/gpu: "{{ .Scheduling.TotalRequestedGPUs }}"
        volumeMounts:
        {{- if .Meta.SecretVolumes }}
        {{- range .Meta.SecretVolumes }}
          - name: {{ .Name }}
            mountPath: {{ .MountPath }}
            subPath: {{ .SubPath }}
        {{- end }}
        {{- end }}
        {{- if .Meta.HasConfigMap }}
          - mountPath: /workload
            name: workload
        {{- end }}
          - mountPath: /dev/shm
            name: dshm
          - name: downloads
            mountPath: /local_resources
            readOnly: false
          - name: checkpoints 
            mountPath: /workdir/checkpoints 
            readOnly: false
          - name: semaphores
            mountPath: /semaphores
            readOnly: false
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop: ["ALL"]
      volumes:
      {{- if .Meta.SecretVolumes }}
      {{- range .Meta.SecretVolumes }}
        - name: {{ .Name }}
          secret:
            secretName: {{ .SecretName }}
            items:
              - key: {{ .Key }}
                path: {{ .SubPath }}
      {{- end }}
      {{- end }}
      {{- if .Meta.HasConfigMap }}
        - name: workload
          configMap:
            name: {{ .Meta.Name }}
      {{- end }}
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 200Gi
        - name: downloads
          emptyDir:
            sizeLimit: "{{ default "128Gi" .Custom.downloadsSizeLimit }}"
        - name: checkpoints
          emptyDir:
            sizeLimit: "{{ default "256Gi" .Custom.checkpointsSizeLimit }}"
        - name: semaphores
          emptyDir:
            sizeLimit: "1Mi"


