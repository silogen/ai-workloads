metadata:
  annotations: {}
  labels: {}
  project_id: silogen
  user_id: user
  workload_id: # defaults to the release name

# PVC annotations for persistent storage (only applied when persistent_storage.enabled=true)
pvc_annotations:
  pvc.silogen.ai/user-pvc-auto-create: "true"
  pvc.silogen.ai/user-pvc-size: "2Gi"
  pvc.silogen.ai/user-pvc-storage-class-name: "multinode"
  pvc.silogen.ai/user-pvc-uid: "{{ .Values.metadata.user_id }}"

image: rocm/pytorch:rocm6.4_ubuntu24.04_py3.12_pytorch_release_2.6.0
imagePullPolicy: Always
gpus: 1
memory_per_gpu: 128 # Gi
cpu_per_gpu: 4

env_vars:
  BUCKET_STORAGE_HOST: http://minio.minio-tenant-default.svc.cluster.local:80
  BUCKET_STORAGE_ACCESS_KEY:
    name: minio-credentials
    key: minio-access-key
  BUCKET_STORAGE_SECRET_KEY:
    name: minio-credentials
    key: minio-secret-key
  VSCODE_CONFIG_DIR: "/workload/{{ .Values.metadata.user_id }}/.vscode-server"

storage:
  ephemeral:
    quantity: 128Gi
    storageClassName: mlstorage
    accessModes:
      - ReadWriteOnce
  dshm:
    sizeLimit: 16Gi

deployment:
  ports:
    http: 8080

# startupProbe - checks if the container has successfully started. It disables liveness and readiness probes until it succeeds, useful for slow-starting applications.
# livenessProbe - checks if the container is still alive. If it fails, Kubernetes restarts the container to recover from failure.
# readinessProbe - checks if the container is ready to serve traffic. If it fails, the container is removed from the service's endpoints but remains running.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
startupProbe:
  httpGet:
    path: /healthz
    port: http
  failureThreshold: 20
livenessProbe:
  httpGet:
    path: /healthz
    port: http
readinessProbe:
  httpGet:
    path: /healthz
    port: http

entrypoint: |
  bash /workload/mount/install_s3_clients.sh
  curl -fsSL https://code-server.dev/install.sh | sh

  # Set up persistent VSCode configuration directory using environment variable
  VSCODE_USER_DIR="$VSCODE_CONFIG_DIR/User"

  # Create directory structure if it doesn't exist
  mkdir -p "$VSCODE_USER_DIR"
  mkdir -p "$VSCODE_CONFIG_DIR/extensions"
  mkdir -p "$VSCODE_CONFIG_DIR/logs"

  # Copy default settings only if user settings don't exist (preserve user customizations)
  if [ ! -f "$VSCODE_USER_DIR/settings.json" ]; then
    cp /workload/mount/default_settings.json "$VSCODE_USER_DIR/settings.json"
  fi

  # Set environment variables for code-server to use persistent directories
  export XDG_DATA_HOME="$VSCODE_CONFIG_DIR"
  export XDG_CONFIG_HOME="$VSCODE_CONFIG_DIR"

  # Install extensions (these will be stored persistently)
  curl -L -o /tmp/aws-s3-vscode-extension-1.8.4.vsix https://github.com/necatiarslan/aws-s3/raw/refs/heads/main/vsix/aws-s3-vscode-extension-1.8.4.vsix &&
  code-server --install-extension /tmp/aws-s3-vscode-extension-1.8.4.vsix
  code-server --install-extension ms-python.python
  code-server --install-extension GitHub.vscode-pull-request-github
  code-server --install-extension ms-kubernetes-tools.vscode-kubernetes-tools

  # Start code-server with persistent configuration
  code-server --auth none --bind-addr 0.0.0.0:8080

# kaiwo settings (if enabled, use kaiwo CRDs to have kaiwo operator manage the workload)
kaiwo:
  enabled: false

http_route:
  enabled: false

ingress:
  enabled: false

# Persistent storage configuration for VSCode settings, extensions, and workspace data
# When enabled: PVC will be created and mounted, VSCode data persists across pod restarts
# When disabled: Only ephemeral storage is used, VSCode data is lost on pod restart
persistent_storage:
  enabled: false
  volumes:
    pvc-user:
      pvc_name: "pvc-{{ .Values.metadata.user_id }}"
      mount_path: "/workload/{{ .Values.metadata.user_id }}"
