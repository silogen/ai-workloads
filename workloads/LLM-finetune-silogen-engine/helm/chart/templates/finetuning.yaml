apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-job"
  namespace: "{{ .Release.Namespace }}"
  {{- if .Values.labels }}
  labels:
    {{- range .Values.labels }}
    {{ .label }}: {{ .value }}
    {{- end }}
  {{- end }}
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      initContainers:
        - name: download
          image: "{{ .Values.ioImage }}"
          imagePullPolicy: Always
          command: ["bash", "-e", "-u", "-c"]
          args:
            - |
              # Setup MinIO, Download resources:
              echo "Copying resources to container...";
              mc alias set minio-host $${BUCKET_STORAGE_HOST} $${BUCKET_STORAGE_ACCESS_KEY} $${BUCKET_STORAGE_SECRET_KEY}
              mc cp --recursive \
                minio-host/{{ .Values.basemodel | trimSuffix "/" }}/ \
                /local_resources/basemodel
              {{- range .Values.finetuning_config.data_conf.training_data.datasets }}
              mc cp \
                minio-host/{{ .path }} \
                /local_resources/{{ .path | replace "/" "_" }}
              {{- end }}
              {{- if (or (eq .Values.finetuning_config.data_conf.validation_data.type "AUTO_SPLIT" ) (eq .Values.finetuning_config.data_conf.validation_data.type "NONE")) }}
              {{- range .Values.finetuning_config.data_conf.validation_data.datasets }}
              mc cp \
                minio-host/{{ .path }} \
                /local_resources/{{ .path | replace "/" "_" }}
              {{- end }}
              {{- end }}
              # Sync checkpoints from remote to local
              if mc mirror minio-host/{{ .Values.checkpointsRemote | trimSuffix "/" }}/ /workdir/checkpoints 2>/dev/null; then
                echo "Downloaded checkpoints from {{ .Values.checkpointsRemote}} to /workdir/checkpoints"
                ls -lah /workdir/checkpoints
              else
                echo "No checkpoints found yet"
              fi
          resources:
            limits:
              memory: "1Gi"
              cpu: 1
            requests:
              memory: "1Gi"
              cpu: 1
          env:
            ### MinIO Setup: ###
          - name: BUCKET_STORAGE_HOST
            value: {{ .Values.bucketStorageHost }}
          - name: BUCKET_STORAGE_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.bucketCredentialsSecret.name }}
                key: {{ .Values.bucketCredentialsSecret.accessKeyKey }}
          - name: BUCKET_STORAGE_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.bucketCredentialsSecret.name }}
                key: {{ .Values.bucketCredentialsSecret.secretKeyKey }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: downloads
              mountPath: /local_resources
              readOnly: false
            - name: checkpoints
              mountPath: /workdir/checkpoints
              readOnly: false
        - name: upload
          image: "{{ .Values.ioImage }}"
          imagePullPolicy: Always
          restartPolicy: Always
          command: ["bash", "-e", "-u", "-c"]
          args:
            - |
              # Setup MinIO:
              mc alias set minio-host $${BUCKET_STORAGE_HOST} $${BUCKET_STORAGE_ACCESS_KEY} $${BUCKET_STORAGE_SECRET_KEY}
              echo "Syncing checkpoint artifacts to bucket...";
              while [ ! -f /semaphores/done_training ]; do
                mc mirror /workdir/checkpoints minio-host/{{ .Values.checkpointsRemote | trimSuffix "/" }}/  2>/dev/null
                sleep 15
              done
              # Once more to ensure everything gets uploaded
              echo "Training done, syncing once more..."
              mc mirror /workdir/checkpoints minio-host/{{ .Values.checkpointsRemote | trimSuffix "/" }}/  2>/dev/null
              # Sync the final checkpoint with overwrite to carry over vLLM-compatibility changes
              mc mirror --overwrite /workdir/checkpoints/checkpoint-final minio-host/{{ .Values.checkpointsRemote | trimSuffix "/" }}/checkpoint-final/
              echo "Done uploading"
              touch /semaphores/done_uploading
              sleep 10  # Let the main container catch
          resources:
            limits:
              memory: "1Gi"
              cpu: 1
            requests:
              memory: "1Gi"
              cpu: 1
          env:
            ### MinIO Setup: ###
          - name: BUCKET_STORAGE_HOST
            value: {{ .Values.bucketStorageHost }}
          - name: BUCKET_STORAGE_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.bucketCredentialsSecret.name }}
                key: {{ .Values.bucketCredentialsSecret.accessKeyKey }}
          - name: BUCKET_STORAGE_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.bucketCredentialsSecret.name }}
                key: {{ .Values.bucketCredentialsSecret.secretKeyKey }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: checkpoints
              mountPath: /workdir/checkpoints
              readOnly: true
            - name: semaphores
              mountPath: /semaphores
              readOnly: false
      containers:
        - name: finetuning
          image: "{{ .Values.finetuningImage }}"
          imagePullPolicy: Always
          env:
            - name: NCCL_DEBUG
              value: INFO
            - name: ACCELERATE_LOG_LEVEL
              value: info
            - name: TRANSFORMERS_VERBOSITY
              value: info
          command:
            - /bin/bash
            - -l
            - -e
            - -u
            - -c
          args:
            - |
              # Print GPU Info:
              rocm-smi
              # Run training:
              accelerate launch \
                --config_file /configs/accelerate_config.yaml \
                --no-python \
                finetuning --num-preprocess-workers 4 {{ .Values.finetuning_config.method }} /configs/finetuning_config.yaml
              # Post process:
              create_vllm_compatible_adapter --training-config /configs/finetuning_config.yaml ./checkpoints/checkpoint-final
              {{- if .Values.mergeAdapter }}
              merge_adapter /local_resources/basemodel ./checkpoints/checkpoint-final ./checkpoints/checkpoint-final-merged
              {{- end }}
              touch /semaphores/done_training
              echo "Done training, waiting for uploads..."
              while [ ! -f /semaphores/done_uploading ]; do
                sleep 5;
              done
              echo "All done, exiting"
          resources:
            limits:
              memory: "{{ mul .Values.finetuningGpus 32 }}Gi"
              cpu: "{{ mul .Values.finetuningGpus 4 }}"
              amd.com/gpu: "{{ .Values.finetuningGpus }}"
            requests:
              memory: "{{ mul .Values.finetuningGpus 32 }}Gi"
              cpu: "{{ mul .Values.finetuningGpus 4 }}"
              amd.com/gpu: "{{ .Values.finetuningGpus }}"
          volumeMounts:
            - name: dshm # Increase SHM size for the container by mounting /dev/shm, for Pytorch parallel processing
              mountPath: /dev/shm
            - name: downloads
              mountPath: /local_resources
              readOnly: false
            - name: checkpoints
              mountPath: /workdir/checkpoints
              readOnly: false
            - name: semaphores
              mountPath: /semaphores
              readOnly: false
            - name: configs
              mountPath: /configs
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ["ALL"]
      securityContext:
        fsGroup: 1000
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory # equivalent to `docker run --shm-size=(total_memory/2)`
        {{- if .Values.storageClass }}
        - name: downloads
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: [ "ReadWriteMany" ]
                storageClassName: {{ .Values.storageClass }}
                resources:
                  requests:
                    storage: "{{ .Values.downloadsReservedSize }}"
        - name: checkpoints
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: [ "ReadWriteMany" ]
                storageClassName: {{ .Values.storageClass }}
                resources:
                  requests:
                    storage: "{{ .Values.checkpointsReservedSize }}"
        {{- else }}
        - name: downloads
          emptyDir:
            sizeLimit: "{{ .Values.downloadsReservedSize }}"
        - name: checkpoints
          emptyDir:
            sizeLimit: "{{ .Values.checkpointsReservedSize }}"
        {{- end }}
        - name: semaphores
          emptyDir:
            medium: Memory
            sizeLimit: "1Mi"
        - name: configs
          configMap:
            name: "{{ .Release.Name }}-configs"
