{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
        "finetuningImage": {
            "type": "string",
            "description": "Container image for finetuning"
        },
        "kaiwo": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If true, use Kaiwo CRDs to have Kaiwo operator manage the workload",
                    "default": false
                }
            },
            "default": {}
        },
        "labels": {
            "type": "object",
            "description": "Any labels to add for the manifest, recommended: kueue",
            "additionalProperties": {
                "type": "string"
            },
            "default": {}
        },
        "imagePullSecrets": {
            "type": "array",
            "description": "Any imagePullSecrets to use",
            "items": {
                "type": "string"
            },
            "default": []
        },
        "bucketStorageHost": {
            "type": "string",
            "description": "The cloud storage host URL"
        },
        "bucketCredentialsSecret": {
            "type": "object",
            "description": "Bucket storage credential secret values, required to have the secret already setup in the cluster (e.g. via external secrets)",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the secret in the cluster that contains the bucket storage credentials",
                    "default": "minio-credentials"
                },
                "accessKeyKey": {
                    "type": "string",
                    "description": "The key in the secret that contains the access key",
                    "default": "minio-access-key"
                },
                "secretKeyKey": {
                    "type": "string",
                    "description": "The key in the secret that contains the access key",
                    "default": "minio-secret-key"
                }
            }
        },
        "checkpointsReservedSize": {
            "type": "string",
            "description": "How much space to reserve for model and data downloads"
        },
        "storageClass": {
            "type": [
                "string",
                "null"
            ],
            "description": "Optionally set this to use a specific storageClass for the storage"
        },
        "nodes": {
            "type": "integer",
            "description": "How many nodes to use. If more than 1, enables ray for multi-node",
            "minimum": 1
        },
        "cpusPerNode": {
            "type": "integer",
            "description": "How many CPUs to use (per node in multi-node case)",
            "default": 2,
            "minimum": 1
        },
        "gpusPerNode": {
            "type": "integer",
            "description": "How many GPUs to use (per node in multi-node case)",
            "default": 1,
            "minimum": 0
        },
        "memoryPerNode": {
            "type": "string",
            "description": "How much memory to use (per node in multi-node case)",
            "default": "16Gi"
        },
        "cpusHeadNode": {
            "type": "integer",
            "description": "How many CPUs to use on head node in multi-node case",
            "default": 2,
            "minimum": 1
        },
        "gpusHeadNode": {
            "type": "integer",
            "description": "How many GPUs to use on head node in multi-node case",
            "default": 0,
            "minimum": 0
        },
        "memoryHeadNode": {
            "type": "string",
            "description": "How much memory to use on head node in multi-node case",
            "default": "16Gi"
        },
        "checkpointsRemote": {
            "type": [
                "string",
                "null"
            ],
            "description": "Path where to sync checkpoints in bucket storage, format: bucketName/path/in/bucket"
        },
        "hfTokenSecret": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "default": {}
        },
        "llamaFactoryConfig": {
            "type": "object",
            "description": "llama-factory configurations to use"
        }
    },
    "required": [
        "finetuningImage",
        "llamaFactoryConfig"
    ]
}
